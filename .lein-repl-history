nREPL server started on port 50021 on host 127.0.0.1 - nrepl://127.0.0.1:50021
REPL-y 0.3.7, nREPL 0.2.12
Clojure 1.5.1
Java HotSpot(TM) 64-Bit Server VM 1.8.0_92-b14
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e
user=> 
user=> (defproject training-day "1.0.0-SNAPSHOT"
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [iloveponies.tests/training-day "0.1.0-SNAPSHOT"]]
  :profiles {:dev {:plugins [[lein-midje "3.1.1"]]}})
(+ 3 4 5)
nREPL server started on port 50021 on host 127.0.0.1 - nrepl://127.0.0.1:50021
REPL-y 0.3.7, nREPL 0.2.12
Clojure 1.5.1
Java HotSpot(TM) 64-Bit Server VM 1.8.0_92-b14
    Docs: (doc function-name-here)
          (find-doc "part-of-name-here")
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e
user=> 
user=> (defproject training-day "1.0.0-SNAPSHOT"
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [iloveponies.tests/training-day "0.1.0-SNAPSHOT"]]
  :profiles {:dev {:plugins [[lein-midje "3.1.1"]]}})
(+ 3 4 5)
(. System exit 0)
(defproject training-day "1.0.0-SNAPSHOT"
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [iloveponies.tests/training-day "0.1.0-SNAPSHOT"]]
  :profiles {:dev {:plugins [[lein-midje "3.1.1"]]}})
(+ 3 4 5)
(+ 7 7 7)
(defproject training-day "1.0.0-SNAPSHOT"
  :dependencies [[org.clojure/clojure "1.5.1"]
                 [iloveponies.tests/training-day "0.1.0-SNAPSHOT"]]
  :profiles {:dev {:plugins [[lein-midje "3.1.1"]]}})
(+ 3 4 5)
(+ 7 7 7)
(. System exit 0)
(load-string "(defproject training-day \"1.0.0-SNAPSHOT\"
  :dependencies [[org.clojure/clojure \"1.5.1\"]
                 [iloveponies.tests/training-day \"0.1.0-SNAPSHOT\"]]
  :profiles {:dev {:plugins [[lein-midje \"3.1.1\"]]}})
(+ 3 4 5)
(+ 7 7 7)")
(load-string "(defproject training-day \"1.0.0-SNAPSHOT\"
  :dependencies [[org.clojure/clojure \"1.5.1\"]
                 [iloveponies.tests/training-day \"0.1.0-SNAPSHOT\"]]
  :profiles {:dev {:plugins [[lein-midje \"3.1.1\"]]}})
(+ 3 4 5)")
(+ 5 6 7)
(use 'training-day)
hai
average
(use 'sarah.random)
stuff
(stuff 1)
(. System exit 0)
(+ 1 2 3)
(answer)
(square)
(do (println "no prompt here!")
   (+ 1 3))
(use 'training-day)
exit
(use 'training-day)
answer
(load 'training-day)
(load "training-day")
(load "src/training_day.clj")
(load "./src/training_day.clj")
exit
(use 'training-day)
answer
(add 5 7)
exit
clear
(2 * 3)
(+ 4 (* 2 3))
(+ 3 4 5 6)
(get "Clojure" 2)
(get "abrakadabra" 0)
(fn [who] (str "Hello, " who "!"))
((fn [who] (str "Hello, " who "!")) "Jani")
((fn [name] (str "Welcome to Rivendell mr " name) "Sarah")
((fn [name] (str "Welcome to Rivendell mr " name)) "Sarah")
((fn [name] (str "hi " name)) "Sarah")
((fn [who] (str "Hello, " who "!")) "Jani")
((fn [name] (str "Welcome to Rivendell mr " name)) "Sarah")
(def hello (fn [who] (str "Hello, " who "!")))
(hello "beautiful")
(answer)
exit
(use 'training-day)
answer
(answer)
(use 'training-day)
exit
(use 'training-day)
exit
(use 'training-day)
(Answer)
(answer)
answer
exit
(class 1)
(class '(1 2 3))
(use 'training-day)
hai
(use 'training-day)
(square 3)
exit
(use 'training-day)
(square 3)
(square 5)
exit
(use 'training-day)
(average 3 4)
(average 2 4)
lein midje
exit
